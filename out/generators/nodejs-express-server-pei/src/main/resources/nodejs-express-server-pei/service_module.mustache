/* eslint-disable no-unused-vars */
import Service from './Service.mjs'

// Service overrides
let serverImplementations = null
const execServiceImplementation = async (params, method) => {
  if (! serverImplementations) {
    serverImplementations = await import('./Services_implementation.mjs')
  }
  let result = {}
  if (method in serverImplementations) {
    result = await serverImplementations[method](...params)
  }
  return result
}

{{#operations}}
{{#operation}}
/**
{{#summary}}
* {{{summary}}}
{{/summary}}
{{#notes}}
* {{{notes}}}
{{/notes}}
*
{{#allParams}}
* {{paramName}} {{{dataType}}} {{{description}}}{{^required}} (optional){{/required}}
{{/allParams}}
{{^returnType}}
* no response value expected for this operation
{{/returnType}}
{{#returnType}}
* returns {{{returnType}}}
{{/returnType}}
* */
export const {{{operationId}}} = ({{#allParams}}{{#-first}}{ {{/-first}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{#-last}} }{{/-last}}{{/allParams}}) => new Promise(
  /* Should this be async??? */
  async (resolve, reject) => {
    try {
      let params = {
        {{#allParams}}
            {{paramName}},
        {{/allParams}}
      }
      let response = await execServiceImplementation(params, "{{operationId}}")
      resolve(Service.successResponse(response.payload, response.code))
    } catch (e) {
      reject(Service.rejectResponse(
        e.message || 'Invalid input',
        e.status || 405,
      ))
    }
  },
)
{{/operation}}
{{/operations}}

