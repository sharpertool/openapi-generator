import http from 'http'
import fs from 'fs'
import {dirname, join, resolve} from 'path'
import swaggerUI from 'swagger-ui-express'
import jsYaml from 'js-yaml'
import express from 'express'
import cors from 'cors'
import cookieParser from 'cookie-parser'
import bodyParser from 'body-parser'
const OpenApiValidator = require('express-openapi-validator')
import logger from './logger'
import config from './config'
import {getAddresses} from './peigenesis/addresses_backend'

const started_at = new Date()

const about_handler = (req, res) => {
  const d = new Date()
  const running_time = d-started_at
  const running_days = running_time / (1000*60*60*24)
  let running = `Running for ${(running_days).toFixed(2)} days`
  if (running_days < 1) {
    const running_hours = running_time / (1000*60*60)
    if (running_hours < 1) {
      running = `Running for ${(running_time/(1000*60)).toFixed(2)} minutes`
    } else {
      running = `Running for ${(running_hours).toFixed(2)} hours`
    }
  }
  res.send({
    current_time: d.toString(),
    running_since: started_at.toString(),
    runtime: running,
    version: config.VERSION,
  })
}

const test_addresses = async (req, res) => {
  const username = 'barbar'
  const account = 'EPG5708'

  try {
    const addresses = await getAddresses(username, account)

    res.send(addresses.Results)
  } catch (e) {
    res.send({status: "Error", msg: e.toString()})
  }

}

class ExpressServer {
  constructor(port, openApiYaml) {
    this.port = port
    this.app = express()
    this.openApiPath = openApiYaml
    try {
      this.schema = jsYaml.safeLoad(fs.readFileSync(openApiYaml))
    } catch (e) {
      logger.error('failed to start Express Server', e.message)
    }
    this.setupMiddleware()
  }

  setupMiddleware() {
    // this.setupAllowedMedia()
    this.app.use(cors())
    this.app.use(bodyParser.json({ limit: '14MB' }))
    this.app.use(express.json())
    this.app.use(express.urlencoded({ extended: false }))
    this.app.use(cookieParser())

    this.app.get('/about', about_handler)

    this.app.get('/addresses', test_addresses)

    //Simple test to see that the server is up and responding
    this.app.get('/hello', (req, res) => res.send(`Hello World. path: ${this.openApiPath}`))
    //Send the openapi document *AS GENERATED BY THE GENERATOR*
    this.app.get('/openapi', (req, res) => res.sendFile((join(__dirname, 'api', 'openapi.yaml'))))
    //View the openapi document in a visual interface. Should be able to test from this page
    this.app.use('/api-doc', swaggerUI.serve, swaggerUI.setup(this.schema))
    this.app.get('/login-redirect', (req, res) => {
      res.status(200)
      res.json(req.query)
    })
    this.app.get('/oauth2-redirect.html', (req, res) => {
      res.status(200)
      res.json(req.query)
    })

    this.app.use(
      OpenApiValidator.middleware({
        apiSpec: this.openApiPath,
        validateRequests: true,
        validateResponses: false,
        operationHandlers: join(__dirname),
        //fileUploader: {dest: this.uploadPath}
      })
    )
  }

  launch() {
    http.createServer(this.app).listen(this.port)
    console.log(`Listening on port ${this.port}`)
  }


  async close() {
    if (this.server !== undefined) {
      await this.server.close()
      console.log(`Server on port ${this.port} shut down`)
    }
  }
}

export default ExpressServer
