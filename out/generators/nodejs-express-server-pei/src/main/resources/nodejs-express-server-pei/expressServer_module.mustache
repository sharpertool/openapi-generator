import http from 'http'
import fs from 'fs'
import {dirname, join, resolve} from 'path'
import swaggerUI from 'swagger-ui-express'
import jsYaml from 'js-yaml'
import express from 'express'
import cors from 'cors'
import cookieParser from 'cookie-parser'
import bodyParser from 'body-parser'
import OpenApiValidator from 'express-openapi-validator'
import logger from './logger.mjs'
import config from './config.mjs'

import {fileURLToPath} from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

class ExpressServer {
  constructor(port, openApiYaml) {
    this.port = port
    this.app = express()
    this.openApiPath = openApiYaml
    try {
      this.schema = jsYaml.safeLoad(fs.readFileSync(openApiYaml))
    } catch (e) {
      logger.error('failed to start Express Server', e.message)
    }
    this.setupMiddleware()
  }

  setupMiddleware() {
    // this.setupAllowedMedia()
    this.app.use(cors())
    this.app.use(bodyParser.json({ limit: '14MB' }))
    this.app.use(express.json())
    this.app.use(express.urlencoded({ extended: false }))
    this.app.use(cookieParser())
    //Simple test to see that the server is up and responding
    this.app.get('/hello', (req, res) => res.send(`Hello World. path: ${this.openApiPath}`))
    //Send the openapi document *AS GENERATED BY THE GENERATOR*
    this.app.get('/openapi', (req, res) => res.sendFile((join(__dirname, 'api', 'openapi.yaml'))))
    //View the openapi document in a visual interface. Should be able to test from this page
    this.app.use('/api-doc', swaggerUI.serve, swaggerUI.setup(this.schema))
    this.app.get('/login-redirect', (req, res) => {
      res.status(200)
      res.json(req.query)
    })
    this.app.get('/oauth2-redirect.html', (req, res) => {
      res.status(200)
      res.json(req.query)
    })

    this.app.use(
      OpenApiValidator.middleware({
        apiSpec: this.openApiPath,
        validateRequests: true,
        validateResponses: false,
        operationHandlers: join(__dirname),
        //fileUploader: {dest: this.uploadPath}
      })
    )
  }

  launch() {
    http.createServer(this.app).listen(this.port)
    console.log(`Listening on port ${this.port}`)
  }


  async close() {
    if (this.server !== undefined) {
      await this.server.close()
      console.log(`Server on port ${this.port} shut down`)
    }
  }
}

export default ExpressServer
